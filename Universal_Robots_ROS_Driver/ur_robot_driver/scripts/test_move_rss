#!/usr/bin/env python

# -- BEGIN LICENSE BLOCK ----------------------------------------------
# Copyright 2021 FZI Forschungszentrum Informatik
# Created on behalf of Universal Robots A/S
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# -- END LICENSE BLOCK ------------------------------------------------
#
# ---------------------------------------------------------------------
# !\file
#
# \author  Felix Exner mauch@fzi.de
# \date    2021-08-05
#
#
# ---------------------------------------------------------------------
import sys
import math
import rospy
import actionlib
from control_msgs.msg import FollowJointTrajectoryAction, FollowJointTrajectoryGoal
from trajectory_msgs.msg import JointTrajectoryPoint
from controller_manager_msgs.srv import SwitchControllerRequest, SwitchController
from controller_manager_msgs.srv import LoadControllerRequest, LoadController
from controller_manager_msgs.srv import ListControllers, ListControllersRequest
import geometry_msgs.msg as geometry_msgs
from cartesian_control_msgs.msg import (
    FollowCartesianTrajectoryAction,
    FollowCartesianTrajectoryGoal,
    CartesianTrajectoryPoint,
)
import tf
from sensor_msgs.msg import CameraInfo, Image
from tf2_msgs.msg import TFMessage
from cv_bridge import CvBridge
import cv2 
import numpy
import numpy as np
import time
import json
import os
import threading
time_tuple = time.localtime(time.time())
from std_srvs.srv import Trigger, TriggerResponse
# Compatibility for python2 and python3
if sys.version_info[0] < 3:
    input = raw_input

# If your robot description is created with a tf_prefix, those would have to be adapted
JOINT_NAMES = [
    "shoulder_pan_joint",
    "shoulder_lift_joint",
    "elbow_joint",
    "wrist_1_joint",
    "wrist_2_joint",
    "wrist_3_joint",
]

# All of those controllers can be used to execute joint-based trajectories.
# The scaled versions should be preferred over the non-scaled versions.
JOINT_TRAJECTORY_CONTROLLERS = [
    "scaled_pos_joint_traj_controller",
    "scaled_vel_joint_traj_controller",
    "pos_joint_traj_controller",
    "vel_joint_traj_controller",
    "forward_joint_traj_controller",
]

# All of those controllers can be used to execute Cartesian trajectories.
# The scaled versions should be preferred over the non-scaled versions.
CARTESIAN_TRAJECTORY_CONTROLLERS = [
    "pose_based_cartesian_traj_controller",
    "joint_based_cartesian_traj_controller",
    "forward_cartesian_traj_controller",
]

# We'll have to make sure that none of these controllers are running, as they will
# be conflicting with the joint trajectory controllers
CONFLICTING_CONTROLLERS = ["joint_group_vel_controller", "twist_controller"]


class TrajectoryClient:
    """Small trajectory client to test a joint trajectory"""

    def __init__(self):
        rospy.init_node("test_move")

        timeout = rospy.Duration(5)
        self.switch_srv = rospy.ServiceProxy(
            "controller_manager/switch_controller", SwitchController
        )
        self.load_srv = rospy.ServiceProxy("controller_manager/load_controller", LoadController)
        self.list_srv = rospy.ServiceProxy("controller_manager/list_controllers", ListControllers)
        try:
            self.switch_srv.wait_for_service(timeout.to_sec())
        except rospy.exceptions.ROSException as err:
            rospy.logerr("Could not reach controller switch service. Msg: {}".format(err))
            sys.exit(-1)

        self.joint_trajectory_controller = JOINT_TRAJECTORY_CONTROLLERS[0]
        self.cartesian_trajectory_controller = CARTESIAN_TRAJECTORY_CONTROLLERS[0]

    def send_joint_trajectory(self):
        """Creates a trajectory and sends it using the selected action server"""

        # make sure the correct controller is loaded and activated
        self.switch_controller(self.joint_trajectory_controller)
        trajectory_client = actionlib.SimpleActionClient(
            "{}/follow_joint_trajectory".format(self.joint_trajectory_controller),
            FollowJointTrajectoryAction,
        )

        # Wait for action server to be ready
        timeout = rospy.Duration(5)
        if not trajectory_client.wait_for_server(timeout):
            rospy.logerr("Could not reach controller action server.")
            sys.exit(-1)

        # Create and fill trajectory goal
        goal = FollowJointTrajectoryGoal()
        goal.trajectory.joint_names = JOINT_NAMES

        # The following list are arbitrary positions
        # Change to your own needs if desired
        position_list = [[0, -1.57, -1.57, 0, 0, 0]]
        position_list.append([0.2, -1.57, -1.57, 0, 0, 0])
        position_list.append([-0.5, -1.57, -1.2, 0, 0, 0])
        duration_list = [3.0, 7.0, 10.0]
        for i, position in enumerate(position_list):
            point = JointTrajectoryPoint()
            point.positions = position
            point.time_from_start = rospy.Duration(duration_list[i])
            goal.trajectory.points.append(point)

        self.ask_confirmation(position_list)
        rospy.loginfo("Executing trajectory using the {}".format(self.joint_trajectory_controller))

        trajectory_client.send_goal(goal)
        trajectory_client.wait_for_result()

        result = trajectory_client.get_result()
        rospy.loginfo("Trajectory execution finished in state {}".format(result.error_code))

    def send_cartesian_trajectory(self):
        """Creates a Cartesian trajectory and sends it using the selected action server"""
        self.switch_controller(self.cartesian_trajectory_controller)

        # make sure the correct controller is loaded and activated
        pose_list= []
        trajectory_client = actionlib.SimpleActionClient(
            "{}/follow_cartesian_trajectory".format(self.cartesian_trajectory_controller),
            FollowCartesianTrajectoryAction,
        )

        # Wait for action server to be ready
        timeout = rospy.Duration(5)
        if not trajectory_client.wait_for_server(timeout):
            rospy.logerr("Could not reach controller action server.")
            sys.exit(-1)

        # The following list are arbitrary positions
        # Change to your own needs if desired
        # pose_list = [
        #     geometry_msgs.Pose(
        #         geometry_msgs.Vector3(-0.4, -0.4, 0.3), geometry_msgs.Quaternion(0, 1, 0, 0)
        #     ),
        #     geometry_msgs.Pose(
        #         geometry_msgs.Vector3(-0.4, -0.4, 0.3), geometry_msgs.Quaternion(0, 1, 0, 0)
        #     ),
        #     geometry_msgs.Pose(
        #         geometry_msgs.Vector3(-0.4, -0.4, 0.3), geometry_msgs.Quaternion(0, 1, 0, 0)
        #     ),
        #     geometry_msgs.Pose(
        #         geometry_msgs.Vector3(-0.4, -0.4, 0.3), geometry_msgs.Quaternion(0, 1, 0, 0)
        #     ),
        #     geometry_msgs.Pose(
        #         geometry_msgs.Vector3(-0.4, -0.4, 0.3), geometry_msgs.Quaternion(0, 1, 0, 0)
        #     ),
        # ]
        # pose_list = [
        #     geometry_msgs.Pose(
        #         geometry_msgs.Vector3(0.6, 0.2, 0.2), geometry_msgs.Quaternion(0, 1,0 ,0)
        #     ),
        # ]
        #     push to edge
        # pose_list = [

        #     geometry_msgs.Pose(
        #         geometry_msgs.Vector3(0.69+0.05*(numpy.random.random()-0.5), -0.321+0.03*(numpy.random.random()-0.5), 0.063+0.01*(numpy.random.random()-0.5)), geometry_msgs.Quaternion(0, -1,0 ,0)
        #     ),
        #     geometry_msgs.Pose(
        #         geometry_msgs.Vector3(0.69+0.05*(numpy.random.random()-0.5), -0.314+0.03*(numpy.random.random()-0.5), 0.026+0.01*(numpy.random.random()-0.5)), geometry_msgs.Quaternion(0, -1,0 ,0)
        #     ),
        #     geometry_msgs.Pose(
        #         geometry_msgs.Vector3(0.69+0.05*(numpy.random.random()-0.5), -0.077+0.03*(numpy.random.random()-0.5), 0.026+0.01*(numpy.random.random()-0.5)), geometry_msgs.Quaternion(0, -1,0 ,0)
        #     ),
        #     geometry_msgs.Pose(
        #         geometry_msgs.Vector3(0.69+0.05*(numpy.random.random()-0.5), -0.147+0.03*(numpy.random.random()-0.5), 0.026+0.01*(numpy.random.random()-0.5)), geometry_msgs.Quaternion(0, -1,0 ,0)
        #     ),
        #     geometry_msgs.Pose(
        #         geometry_msgs.Vector3(0.69+0.05*(numpy.random.random()-0.5), -0.107+0.03*(numpy.random.random()-0.5), 0.188+0.01*(numpy.random.random()-0.5)), geometry_msgs.Quaternion(0, -1,0 ,0)
        #     ),
        #     geometry_msgs.Pose(
        #         geometry_msgs.Vector3(0.69+0.05*(numpy.random.random()-0.5), 0.291+0.03*(numpy.random.random()-0.5), 0.188+0.01*(numpy.random.random()-0.5)), geometry_msgs.Quaternion(0, -1,0 ,0)
        #     ),
        #     geometry_msgs.Pose(
        #         geometry_msgs.Vector3(0.69+0.05*(numpy.random.random()-0.5), 0.062+0.03*(numpy.random.random()-0.5), 0.037+0.01*(numpy.random.random()-0.5)), geometry_msgs.Quaternion(0.5, 0.5, -0.5 ,0.5)
        #     ),
        # ]

        # duration_list = [3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0]

        # push to wall
        pose_list.append([
            geometry_msgs.Pose(
                geometry_msgs.Vector3(0.6815+0.02*(numpy.random.random()-0.5), 0.0061+0.01*(numpy.random.random()-0.5), 0.0412+0.01*(numpy.random.random()-0.5)), geometry_msgs.Quaternion(0.707, -0.707,0,0)
            ),])
        pose_list.append([
            geometry_msgs.Pose(
                geometry_msgs.Vector3(0.6815+0.02*(numpy.random.random()-0.5), -0.1759+0.01*(numpy.random.random()-0.5), 0.0412+0.01*(numpy.random.random()-0.5)), geometry_msgs.Quaternion(0.707, -0.707,0,0)
            ),])
        pose_list.append([
            geometry_msgs.Pose(
                geometry_msgs.Vector3(0.6815, -0.17, 0.1078), geometry_msgs.Quaternion(0.707, -0.707,0,0)
            ),])
        pose_list.append([
            geometry_msgs.Pose(
                geometry_msgs.Vector3(0.6815, -0.1749, 0.1367), geometry_msgs.Quaternion(0.707, -0.707,0,0)
            ),])
        # pose_list.append([
        #     geometry_msgs.Pose(
        #         geometry_msgs.Vector3(0.6815, -0.2, 0.1367), geometry_msgs.Quaternion(0.6719,-0.6720,0.2202,0.2199)
        #     ),])
        pose_list.append([
            geometry_msgs.Pose(
                geometry_msgs.Vector3(0.6815, -0.2227, 0.1367), geometry_msgs.Quaternion(0.6616,-0.6617,0.2494,0.2494)
            ),])    
        pose_list.append([
            geometry_msgs.Pose(
                geometry_msgs.Vector3(0.6815, -0.2235, 0.1366), geometry_msgs.Quaternion(0.5939,-0.5939,0.3838,0.3838)
            ),])
        pose_list.append([
            geometry_msgs.Pose(
                geometry_msgs.Vector3(0.6815, -0.2663, 0.1102), geometry_msgs.Quaternion(0.6039,-0.6039,0.3679,0.3679)
            ),])
        # pose_list.append([
        #     geometry_msgs.Pose(
        #         geometry_msgs.Vector3(0.6815, -0.2535, 0.1266), geometry_msgs.Quaternion(0.6039,-0.6039,0.3679,0.3679)
        #     ),])
        # pose_list.append([
        #     geometry_msgs.Pose(
        #         geometry_msgs.Vector3(0.69, -0.237, 0.1026), geometry_msgs.Quaternion(0.659,-0.659,0.2564,0.2564)
        #     ),])
        # pose_list.append([
        #     geometry_msgs.Pose(
        #         geometry_msgs.Vector3(0.69, -0.246, 0.1026), geometry_msgs.Quaternion(0.659,-0.659,0.2564,0.2564)
        #     ),])
        # pose_list.append([
        #     geometry_msgs.Pose(
        #         geometry_msgs.Vector3(0.69, -0.246, 0.1026), geometry_msgs.Quaternion(0.6234,-0.6234,0.3338,0.3335)
        #     ),])
        # pose_list.append([
        #     geometry_msgs.Pose(
        #         geometry_msgs.Vector3(0.69, -0.260, 0.1026), geometry_msgs.Quaternion(0.6234,-0.6234,0.3338,0.3335)
        #     ),])
        # pose_list.append([
        #     geometry_msgs.Pose(
        #         geometry_msgs.Vector3(0.69, -0.215, 0.1026), geometry_msgs.Quaternion(0.5497,-0.5497,0.445,0.446)
        #     ),])
        # pose_list.append([
        #     geometry_msgs.Pose(
        #         geometry_msgs.Vector3(0.69, -0.303, 0.1026), geometry_msgs.Quaternion(0.5497,-0.5497,0.445,0.446)
        #     ),])

        # duration_list = [0.0, 2.0, 2.0, 3.0, 4.0, 5.0, 8.0, 28.0, 33.0, 38.0, 43.0, 48.0, 53.0, 58.0, 63.0, 68.0]
        duration_list = [0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,]


        point = []
        goal = []
        rospy.loginfo(
            "Executing trajectory using the {}".format(self.cartesian_trajectory_controller)
        )
        rospy.Service("save_service", Trigger, save_callback) 
          
        for j in range(0,len(pose_list)):
            for i, pose1 in enumerate(pose_list[j]):
                goal.append(FollowCartesianTrajectoryGoal())
                point.append(CartesianTrajectoryPoint())
                point[j].pose = pose1
                point[j].time_from_start = rospy.Duration(duration_list[i])
                goal[j].trajectory.points.append(point[j])    
            # self.ask_confirmation(pose_list[j])
            # rospy.loginfo(
            #     "Executing trajectory using the {}".format(self.cartesian_trajectory_controller)
            # )
            # rospy.Service("save_service", Trigger, save_callback)
                trajectory_client.send_goal(goal[j])
                trajectory_client.wait_for_result()
                if j == len(pose_list):
                    rospy.sleep(1)
                    rospy.sleep(0.5)
        # for i, pose in enumerate(pose_list_2):
        #     point_2 = CartesianTrajectoryPoint()
        #     point_2.pose = pose
        #     point_2.time_from_start = rospy.Duration(duration_list[i])
        #     goal_2.trajectory.points.append(point_2)
        # trajectory_client.send_goal(goal_2)
        # trajectory_client.wait_for_result()
        # rospy.sleep(0.1)
        # for i, pose in enumerate(pose_list_3):
        #     point_3 = CartesianTrajectoryPoint()
        #     point_3.pose = pose
        #     point_3.time_from_start = rospy.Duration(duration_list[i])
        #     goal_3.trajectory.points.append(point_3)
        # trajectory_client.send_goal(goal_3)
        # trajectory_client.wait_for_result()
        # rospy.sleep(0.1)
        # for i, pose in enumerate(pose_list_4):
        #     point_4 = CartesianTrajectoryPoint()
        #     point_4.pose = pose
        #     point_4.time_from_start = rospy.Duration(duration_list[i])
        #     goal_4.trajectory.points.append(point_4)
        # trajectory_client.send_goal(goal_4)
        trajectory_client.wait_for_result()


        result = trajectory_client.get_result()

        rospy.loginfo("Trajectory execution finished in state {}".format(result.error_code))

    ###############################################################################################
    #                                                                                             #
    # Methods defined below are for the sake of safety / flexibility of this demo script only.    #
    # If you just want to copy the relevant parts to make your own motion script you don't have   #
    # to use / copy all the functions below.                                                       #
    #                                                                                             #
    ###############################################################################################

    def ask_confirmation(self, waypoint_list):
        """Ask the user for confirmation. This function is obviously not necessary, but makes sense
        in a testing script when you know nothing about the user's setup."""
        rospy.logwarn("The robot will move to the following waypoints: \n{}".format(waypoint_list))
        confirmed = False
        valid = False
        while not valid:
            input_str = input(
                "Please confirm that the robot path is clear of obstacles.\n"
                "Keep the EM-Stop available at all times. You are executing\n"
                "the motion at your own risk. Please type 'y' to proceed or 'n' to abort: "
            )
            valid = input_str in ["y", "n"]
            if not valid:
                rospy.loginfo("Please confirm by entering 'y' or abort by entering 'n'")
            else:
                confirmed = input_str == "y"
        if not confirmed:
            rospy.loginfo("Exiting as requested by user.")
            sys.exit(0)

    def choose_controller(self):
        """Ask the user to select the desired controller from the available list."""
        rospy.loginfo("Available trajectory controllers:")
        for (index, name) in enumerate(JOINT_TRAJECTORY_CONTROLLERS):
            rospy.loginfo("{} (joint-based): {}".format(index, name))
        for (index, name) in enumerate(CARTESIAN_TRAJECTORY_CONTROLLERS):
            rospy.loginfo("{} (Cartesian): {}".format(index + len(JOINT_TRAJECTORY_CONTROLLERS), name))
        choice = 7
        while choice < 0:
            input_str = input(
                "Please choose a controller by entering its number (Enter '0' if "
                "you are unsure / don't care): "
            )
            try:
                choice = int(input_str)
                if choice < 0 or choice >= len(JOINT_TRAJECTORY_CONTROLLERS) + len(
                    CARTESIAN_TRAJECTORY_CONTROLLERS
                ):
                    rospy.loginfo(
                        "{} not inside the list of options. "
                        "Please enter a valid index from the list above.".format(choice)
                    )
                    choice = -1
            except ValueError:
                rospy.loginfo("Input is not a valid number. Please try again.")
        if choice < len(JOINT_TRAJECTORY_CONTROLLERS):
            self.joint_trajectory_controller = JOINT_TRAJECTORY_CONTROLLERS[choice]
            return "joint_based"

        self.cartesian_trajectory_controller = CARTESIAN_TRAJECTORY_CONTROLLERS[
            choice - len(JOINT_TRAJECTORY_CONTROLLERS)
        ]
        return "cartesian"

    def switch_controller(self, target_controller):
        """Activates the desired controller and stops all others from the predefined list above"""
        other_controllers = (
            JOINT_TRAJECTORY_CONTROLLERS
            + CARTESIAN_TRAJECTORY_CONTROLLERS
            + CONFLICTING_CONTROLLERS
        )

        other_controllers.remove(target_controller)

        srv = ListControllersRequest()
        response = self.list_srv(srv)
        for controller in response.controller:
            if controller.name == target_controller and controller.state == "running":
                return

        srv = LoadControllerRequest()
        srv.name = target_controller
        self.load_srv(srv)

        srv = SwitchControllerRequest()
        srv.stop_controllers = other_controllers
        srv.start_controllers = [target_controller]
        srv.strictness = SwitchControllerRequest.BEST_EFFORT
        self.switch_srv(srv)
class RecordROS():
    def __init__(self):
        self.cvbridge = CvBridge()
        self.count = 0

        self.images = None
        self.ps_msg = None
        rospy.Subscriber('/tf',TFMessage,self.tf_callback,queue_size=2)
        rospy.Subscriber('/rgb/image_raw', Image, self.color_callback)
        rospy.sleep(1)
        
    def tf_callback(self,msg):
        self.count=self.count+1
        self.ps_msg = msg


    def color_callback(self,image_msg):
        image = self.cvbridge.imgmsg_to_cv2(image_msg,  desired_encoding='rgb8')

        self.images = cv2.cvtColor(image,cv2.COLOR_BGR2RGB)
        self.images = self.images[192:1344,350:1502]
        self.images = cv2.resize(self.images,(256,256))
    def record(self):
        count = 0
        while not rospy.is_shutdown():
            count = count+1
            image = self.images
            # print(dir(recordros.ps_msg.transforms))
            # print(type(recordros.ps_msg))
            imagefile = '/home/yhx/Documents/catkin_ws/src/Universal_Robots_ROS_Driver/ur_robot_driver/scripts/image/image{}.png'.format(count)
            cv2.imwrite(imagefile, image)
            with open('/home/yhx/Documents/catkin_ws/src/Universal_Robots_ROS_Driver/ur_robot_driver/scripts/tf_record.txt','a') as f:
                f.writelines("{}".format(self.ps_msg.transforms))
            # print(count)
            rate.sleep()       

def save_callback(request):
    # Your service logic here
    success = True  # Change this based on your logic
    message = "Service call succeeded" if success else "Service call failed"
    return TriggerResponse(success=success, message=message)

if __name__ == "__main__":
    client = TrajectoryClient()
    recordros = RecordROS() 
    rate = rospy.Rate(2)
    
    # The controller choice is obviously not required to move the robot. It is a part of this demo
    # script in order to show all available trajectory controllers.
    trajectory_type = client.choose_controller()
    if trajectory_type == "joint_based":
        client.send_joint_trajectory()
    elif trajectory_type == "cartesian":      
        client.send_cartesian_trajectory()



    else:
        raise ValueError(
            "I only understand types 'joint_based' and 'cartesian', but got '{}'".format(
                trajectory_type
            )
        )
