#!/usr/bin/env python

# -- BEGIN LICENSE BLOCK ----------------------------------------------
# Copyright 2021 FZI Forschungszentrum Informatik
# Created on behalf of Universal Robots A/S
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# -- END LICENSE BLOCK ------------------------------------------------
#
# ---------------------------------------------------------------------
# !\file
#
# \author  Felix Exner mauch@fzi.de
# \date    2021-08-05
#
#
# ---------------------------------------------------------------------
import sys
import os
import message_filters
import rospy
import actionlib
import numpy as np
from control_msgs.msg import FollowJointTrajectoryAction, FollowJointTrajectoryGoal
from trajectory_msgs.msg import JointTrajectoryPoint
from controller_manager_msgs.srv import SwitchControllerRequest, SwitchController
from controller_manager_msgs.srv import LoadControllerRequest, LoadController
from controller_manager_msgs.srv import ListControllers, ListControllersRequest
import geometry_msgs.msg as geometry_msgs
from cartesian_control_msgs.msg import (
    FollowCartesianTrajectoryAction,
    FollowCartesianTrajectoryGoal,
    CartesianTrajectoryPoint,
)
from geometry_msgs.msg import PointStamped
from nav_msgs.msg import Path
from sensor_msgs.msg import Image
import cv2 
from cv_bridge import CvBridge
import time
from Robotiq2FGripperSimpleController import *


# Compatibility for python2 and python3
if sys.version_info[0] < 3:
    input = raw_input

# If your robot description is created with a tf_prefix, those would have to be adapted
JOINT_NAMES = [
    "shoulder_pan_joint",
    "shoulder_lift_joint",
    "elbow_joint",
    "wrist_1_joint",
    "wrist_2_joint",
    "wrist_3_joint",
]

# All of those controllers can be used to execute joint-based trajectories.
# The scaled versions should be preferred over the non-scaled versions.
JOINT_TRAJECTORY_CONTROLLERS = [
    "scaled_pos_joint_traj_controller",
]

# All of those controllers can be used to execute Cartesian trajectories.
# The scaled versions should be preferred over the non-scaled versions.
CARTESIAN_TRAJECTORY_CONTROLLERS = [
    "joint_based_cartesian_traj_controller",
]

# We'll have to make sure that none of these controllers are running, as they will
# be conflicting with the joint trajectory controllers
CONFLICTING_CONTROLLERS = ["joint_group_vel_controller", "twist_controller"]


class TrajectoryClient:
    """Small trajectory client to test a joint trajectory"""

    def __init__(self):
        rospy.init_node("Robotiq2FGripperRobotOutput")

        timeout = rospy.Duration(5)
        # self.grasp_mode_horizon = True
        self.grasp_mode_horizon = True
        self.grasp_change= True
        self.small = True


        self.switch_srv = rospy.ServiceProxy(
            "controller_manager/switch_controller", SwitchController
        )
        self.load_srv = rospy.ServiceProxy("controller_manager/load_controller", LoadController)
        self.list_srv = rospy.ServiceProxy("controller_manager/list_controllers", ListControllers)
        try:
            self.switch_srv.wait_for_service(timeout.to_sec())
        except rospy.exceptions.ROSException as err:
            rospy.logerr("Could not reach controller switch service. Msg: {}".format(err))
            sys.exit(-1)

        self.joint_trajectory_controller = JOINT_TRAJECTORY_CONTROLLERS[0]
        self.cartesian_trajectory_controller = CARTESIAN_TRAJECTORY_CONTROLLERS[0]

    
    
    def mode_change(self):
        """Creates a trajectory and sends it using the selected action server"""

        # make sure the correct controller is loaded and activated
        self.switch_controller(self.joint_trajectory_controller)
        trajectory_client = actionlib.SimpleActionClient(
            "{}/follow_joint_trajectory".format(self.joint_trajectory_controller),
            FollowJointTrajectoryAction,
        )

        # Wait for action server to be ready
        timeout = rospy.Duration(5)
        if not trajectory_client.wait_for_server(timeout):
            rospy.logerr("Could not reach controller action server.")
            sys.exit(-1)

        # Create and fill trajectory goal
        goal = FollowJointTrajectoryGoal()
        goal.trajectory.joint_names = JOINT_NAMES

        # The following list are arbitrary positions
        # Change to your own needs if desired


        if self.grasp_change and not self.grasp_mode_horizon:
            position_list=[[np.pi/180*45, -np.pi/180*90, np.pi/180*75, -np.pi/180*30, 0, 0]]
            position_list.append([np.pi/180*45, -np.pi/180*80, np.pi/180*60, -np.pi/180*75, -np.pi/180*90, np.pi/180*180])
            duration_list = [1.0, 2.0]
        
        if self.grasp_change and  self.grasp_mode_horizon:
            position_list= [[np.pi/180*45, -np.pi/180*90, np.pi/180*75, -np.pi/4, 0, 0]]    
            position_list.append([np.pi/180*45, -np.pi/180*120, np.pi/180*95, np.pi/180*80, np.pi/2, 0])
            duration_list = [1.0, 2.0]

        # position_list.[[np.pi/4, -np.pi/2*8/9, np.pi/3, np.pi/2*8/9, np.pi/2, 0]]
        

        for i, position in enumerate(position_list):
            point = JointTrajectoryPoint()
            point.positions = position
            point.velocities = [0, 0, 0, 0, 0, 0]
            point.time_from_start = rospy.Duration(duration_list[i])
            goal.trajectory.points.append(point)

        # self.ask_confirmation(position_list)
        rospy.loginfo("Executing trajectory using the {}".format(self.joint_trajectory_controller))

        trajectory_client.send_goal(goal)
        trajectory_client.wait_for_result()

        result = trajectory_client.get_result()
        rospy.loginfo("Trajectory execution finished in state {}".format(result.error_code))
    def recover(self):
        """Creates a trajectory and sends it using the selected action server"""

        # make sure the correct controller is loaded and activated
        self.switch_controller(self.joint_trajectory_controller)
        trajectory_client = actionlib.SimpleActionClient(
            "{}/follow_joint_trajectory".format(self.joint_trajectory_controller),
            FollowJointTrajectoryAction,
        )

        # Wait for action server to be ready
        timeout = rospy.Duration(5)
        if not trajectory_client.wait_for_server(timeout):
            rospy.logerr("Could not reach controller action server.")
            sys.exit(-1)

        # Create and fill trajectory goal
        goal = FollowJointTrajectoryGoal()
        goal.trajectory.joint_names = JOINT_NAMES

        # The following list are arbitrary positions
        # Change to your own needs if desired


        if self.grasp_mode_horizon:
            # position_list=[[np.pi/4, -np.pi/2*8/9, np.pi/3, -np.pi/6, 0, 0]]
            position_list=[[np.pi/180*45, -np.pi/180*120, np.pi/180*95, np.pi/180*80, np.pi/2, 0]]
            duration_list = [3.0]
        
        if not self.grasp_mode_horizon:
            position_list=[[np.pi/180*45, -np.pi/180*80, np.pi/180*60, -np.pi/180*75, -np.pi/180*90, np.pi/180*180]]            
            duration_list = [3.0]

        # position_list.[[np.pi/4, -np.pi/2*8/9, np.pi/3, np.pi/2*8/9, np.pi/2, 0]]
        

        for i, position in enumerate(position_list):
            point = JointTrajectoryPoint()
            point.positions = position
            point.velocities = [0, 0, 0, 0, 0, 0]
            point.time_from_start = rospy.Duration(duration_list[i])
            goal.trajectory.points.append(point)

        # self.ask_confirmation(position_list)
        rospy.loginfo("Executing trajectory using the {}".format(self.joint_trajectory_controller))

        trajectory_client.send_goal(goal)
        trajectory_client.wait_for_result()

        result = trajectory_client.get_result()
        rospy.loginfo("Trajectory execution finished in state {}".format(result.error_code))


    def send_cartesian_trajectory(self,vector,quaterntion):
        """Creates a Cartesian trajectory and sends it using the selected action server"""
        self.switch_controller(self.cartesian_trajectory_controller)

        # make sure the correct controller is loaded and activated
        goal = FollowCartesianTrajectoryGoal()
        trajectory_client = actionlib.SimpleActionClient(
            "{}/follow_cartesian_trajectory".format(self.cartesian_trajectory_controller),
            FollowCartesianTrajectoryAction,
        )

        # Wait for action server to be ready
        timeout = rospy.Duration(5)
        if not trajectory_client.wait_for_server(timeout):
            rospy.logerr("Could not reach controller action server.")
            sys.exit(-1)

        # The following list are arbitrary positions
        # Change to your own needs if desired
        pose_list = []
        for vec in vector:
            pose_list.append(geometry_msgs.Pose(geometry_msgs.Vector3(vec[0], vec[1], vec[2]), 
                            geometry_msgs.Quaternion(quaterntion[0],quaterntion[1],quaterntion[2],quaterntion[3])))

        
        duration_list = [2.0, 4.0, 6.0, 9.0, 12.0]
        for i, pose in enumerate(pose_list):
            point = CartesianTrajectoryPoint()
            point.pose = pose
            point.time_from_start = rospy.Duration(duration_list[i])
            goal.trajectory.points.append(point)

        # self.ask_confirmation(pose_list)
        rospy.loginfo(
            "Executing trajectory using the {}".format(self.cartesian_trajectory_controller)
        )
        trajectory_client.send_goal(goal)
        trajectory_client.wait_for_result()

        result = trajectory_client.get_result()

        rospy.loginfo("Trajectory execution finished in state {}".format(result.error_code))

    ###############################################################################################
    #                                                                                             #
    # Methods defined below are for the sake of safety / flexibility of this demo script only.    #
    # If you just want to copy the relevant parts to make your own motion script you don't have   #
    # to use / copy all the functions below.                                                       #
    #                                                                                             #
    ###############################################################################################




    def switch_controller(self, target_controller):
        """Activates the desired controller and stops all others from the predefined list above"""
        other_controllers = (
            JOINT_TRAJECTORY_CONTROLLERS
            + CARTESIAN_TRAJECTORY_CONTROLLERS
            + CONFLICTING_CONTROLLERS
        )

        other_controllers.remove(target_controller)

        srv = ListControllersRequest()
        response = self.list_srv(srv)
        for controller in response.controller:
            if controller.name == target_controller and controller.state == "running":
                return

        srv = LoadControllerRequest()
        srv.name = target_controller
        self.load_srv(srv)

        srv = SwitchControllerRequest()
        srv.stop_controllers = other_controllers
        srv.start_controllers = [target_controller]
        srv.strictness = SwitchControllerRequest.BEST_EFFORT
        self.switch_srv(srv)



def euler_to_quaternion(euler, degree_mode=1):
    roll, yaw, pitch = euler
    if degree_mode == 1:
        roll = np.deg2rad(roll)
        pitch = np.deg2rad(pitch)
        yaw = np.deg2rad(yaw)

    qx = np.sin(pitch/2) * np.cos(yaw/2) * np.cos(roll/2) - np.cos(pitch/2) * np.sin(yaw/2) * np.sin(roll/2)
    qy = np.cos(pitch/2) * np.sin(yaw/2) * np.cos(roll/2) + np.sin(pitch/2) * np.cos(yaw/2) * np.sin(roll/2)
    qz = np.cos(pitch/2) * np.cos(yaw/2) * np.sin(roll/2) - np.sin(pitch/2) * np.sin(yaw/2) * np.cos(roll/2)
    qw = np.cos(pitch/2) * np.cos(yaw/2) * np.cos(roll/2) + np.sin(pitch/2) * np.sin(yaw/2) * np.sin(roll/2)
    q = np.array([qx, qy, qz, qw])
    return q
  
if __name__ == "__main__":
    client = TrajectoryClient()

    grip_command = robotiq_reset()

    # while a.count < 1:
    #     rospy.Subscriber("/camera/color/image_raw", 
    #                     Image, 
    #                     a.save_image)  
    #     rospy.Subscriber("/camera/aligned_depth_to_color/image_raw", 
    #                     Image, 
    #                     a.save_depth)
    # a.count = 0  
    os.system('python keep_picture.py ')

    rospy.sleep(8.5)
    euler1 = [-65,0,90]
    euler2 = [-155,180,0]
    euler3 = [-60,0,90]



    quat1 = euler_to_quaternion(euler1, 1)
    quat2 = euler_to_quaternion(euler2, 1)
    quat3 = euler_to_quaternion(euler3, 1)
    # print (quat1)
    # client.grasp_mode_horizon = True
    # client.recover()


    client.grasp_mode_horizon = True
    if client.grasp_mode_horizon == True:
        client.send_cartesian_trajectory([[-0.28, -0.28, 0.3],[-0.28, -0.28, 0.05],[-0.28-0.05*1.732, -0.28-0.05, 0.05]],(quat1))
        robotiq_close(grip_command, 255)   
        client.send_cartesian_trajectory([[-0.453, -0.38, 0.4],[-0.8, -0.1, 0.4],[-0.8, -0.1, 0.05]],(quat1))
        robotiq_open(grip_command)
        client.send_cartesian_trajectory([[-0.8+0.173/2, -0.05, 0.05],[-0.8+0.173/2, -0.05, 0.4]],(quat1))
        client.recover()
        
    rospy.sleep(8.5)
    os.system('python keep_picture.py ')



    client.grasp_mode_horizon = False
    if not client.grasp_mode_horizon == True:
        client.mode_change()
        robotiq_close(grip_command,166)
        rospy.sleep(8)
        client.send_cartesian_trajectory([[-0.35, -0.6, 0.4],[-0.35, -0.6, 0.33]],(quat2))
        robotiq_close(grip_command, 255)
        client.send_cartesian_trajectory([[-0.35, -0.6, 0.4],[0.1, -0.8, 0.4],[0.1, -0.8, 0.26]],(quat2))
        robotiq_open(grip_command)
        client.send_cartesian_trajectory([[0.1, -0.8, 0.4]],(quat2))
        client.recover()
    
    
    client.grasp_mode_horizon = True
    if  client.grasp_mode_horizon == True:
        client.mode_change()
    
    rospy.sleep(8.5)
    os.system('python keep_picture.py ')



    client.send_cartesian_trajectory([[-0.08, -0.42, 0.3],[-0.08, -0.42, 0.06], [-0.08-0.05*1.73, -0.45-0.05, 0.06]],(quat3))
    robotiq_close(grip_command, 255)   
    client.send_cartesian_trajectory([[-0.17, -0.489, 0.4],[-0.62, 0.15, 0.4],[-0.62, 0.15, 0.06]],(quat3))
    robotiq_open(grip_command)
    client.send_cartesian_trajectory([[-0.62+0.05*1.732, 0.15+0.05, 0.06],[-0.62+0.05*1.732, 0.15+0.05, 0.4]],(quat3))
    client.recover()






    

